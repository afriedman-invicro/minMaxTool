#include "ipacs.vqs"
// clear all loaded data
var dm = VQ.dataManager();
var mw = VQ.mainWin();
var mm = VQ.minMaxTool();
dm.unloadData(VQ.index(0),-1);
mw.setViewMode('Slice View','Navigation');

// pause sctipt to allow user to load everything in -> wait for them to say "ok"
VQ.suspend('Load in dataset(s), ok when done',false);

var nSeries = dm.size();
// set all the CTS to gray scale
//set all the PT/NMs to nih_fire2 

var convUnits = VQ.askYesNoQuestion('Convert units?',false);
if (convUnits){
    setUnits();
}

var ct = [];
var nm = [];
for (var j = 0; j < nSeries; j++){
    if (dm.getDesc(VQ.index(j),'Modality') == 'CT'){
        dm.setPalette(VQ.index(j),'gray'); 
        ct.push(dm.getDesc(VQ.index(j),'StudyInstanceUID'));
    }
    else{
        dm.setPalette(VQ.index(j),'nih_fire2');
        nm.push(dm.getDesc(VQ.index(j),'StudyInstanceUID'))
    }
}

nCTs = ct.length;
nPTs = nm.length;


if (nSeries > (nCTs*2)){
    VQ.suspend('Multiple NMs for one CT - is this intended?')
}


// got to multiview
mw.setViewMode('Multi View','Layout');
var mv = VQ.currentView();


//set up 1 row, number of columns = number of data sets
mv.setLayoutSize(1,nPTs);


//set to sag. panel for all
for (var k = 0; k < nPTs; k++){
    mv.setPlane(1,k,1);
}


// load 1st CT and 1st PT/NM in first panel -> etc for the rest
var counter = 0;
for (var m = 0; m < nSeries; m++){
    if (dm.getDesc(VQ.index(m),'Modality') != 'CT'){
        counter+=1
        mv.setData(0,counter-1,1,m);
       
    }

}
for (var i = 0; i < nPTs; i++){
    mv.setData(0,i,0,ct.indexOf(nm[i]))
}


var rangesGood = false;

while (!rangesGood){
    fixRanges();
    rangesGood = VQ.askYesNoQuestion('CT/NM ranges good to go?',true);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////
function fixRanges(){
    var ctRangeGood = false;
    var nmRangeGood = false;
    while (!ctRangeGood){
        var ctMinMax = VQ.getValues('Set CT range',{'Min':'text','Max':'text'},false);
        var flag = (parseFloat(ctMinMax['Min']) > parseFloat(ctMinMax['Max']));
        while (flag){
            VQ.showMessage('Please reset - max must be > min!')
            ctMinMax = VQ.getValues('Set CT range',{'Min':'text','Max':'text'},false);
            flag = (parseFloat(ctMinMax['Min']) > parseFloat(ctMinMax['Max']));
        }
        for (var n = 0; n < nCTs; n++){
           dm.setMinMaxCache(VQ.index(n),parseFloat(ctMinMax['Min']),parseFloat(ctMinMax['Max']));
           }
        ctRangeGood = VQ.askYesNoQuestion('Is CT range good to go?',false);
       }
    while (!nmRangeGood){
        var nmMinMax = VQ.getValues('Set NM range', {'Min':'text','Max':'text'},false);
        var flag = (parseFloat(nmMinMax['Min']) > parseFloat(nmMinMax['Max']));
        while (flag){
            VQ.showMessage('Please reset - max must be > min!')
            nmMinMax = VQ.getValues('Set NM range',{'Min':'text','Max':'text'},false);
            flag = (parseFloat(nmMinMax['Min']) > parseFloat(nmMinMax['Max']));
        }
        for (var k = nCTs; k < nSeries; k++){
        dm.setMinMaxCache(VQ.index(k),parseFloat(nmMinMax['Min']),parseFloat(nmMinMax['Max'])); 
           } 
        nmRangeGood = VQ.askYesNoQuestion('Is NM range good to go?',false);
       }

}

function setUnits(){
       
        var unit = VQ.getValues('NM Units',{'Unit':['%ID/g','SUV']},true);
        var tmp = String(VQ.currentDcmRep());
        var port = tmp.match(/:\d+/g);
        tmp = tmp.replace('ipacs://:@','ipacss://').replace(port,'');
        var url = tmp.slice(0,tmp.indexOf('/customers'));
        var proj = tmp.slice(tmp.indexOf('/customers'),tmp.length+1);
        var repo = new iPACS(url,proj);
        if (unit['Unit']=='%ID/g'){
            for (var k = 0; k < nSeries; k++){
                if (dm.getDesc(VQ.index(k),'Modality') != 'CT'){
                    var injDose = repo.getInjectedDose(VQ.index(k));
                    if (injDose==-1) {
                        var idErr = 'ID not found for index ' + k.toString() + '. Please input manually'
                        var dose = VQ.getValues(idErr,{'Injected Dose':'text'},false);
                        injDose = parseFloat(dose['Injected Dose']);}
                    else {injDose = injDose;}
                    VQ.showMessage(injDose)
                    convertToPIDG(VQ.index(k),injDose);
                }
            
            }
            
        }
        else{
            for (var k = 0; k < nSeries; k++){
                if (dm.getDesc(VQ.index(k),'Modality') != 'CT'){
                    var injDose = repo.getInjectedDose(VQ.index(k));
                    if (injDose==-1) {
                        var idErr = 'ID not found for index ' + k.toString() + '. Please input manually'
                        var dose = VQ.getValues(idErr,{'Injected Dose':'text'},false);
                        injDose = parseFloat(dose['Injected Dose']);
                        }
                    else {injDose = injDose;}
                    var wt = repo.getWeight(VQ.index(k));
                    if (wt==-1) {
                        var wtErr = 'Weight not found for index ' + k.toString() + '. Please input manually'
                        var weight = VQ.getValues(wtErr,{'Weight':'text'},false);
                        wt = parseFloat(weight['Weight']);
                        }
                    else {wt = wt;}
                    convertToSUV(VQ.index(k),injDose,wt);
                }
                
        }
    }
}

function convertToPIDG(idx,dose){
    var mw = VQ.mainWin();
    var dm = VQ.dataManager();
    // get voxel size
    var vox_size = dm.voxelSizeX() * dm.voxelSizeY() * dm.voxelSizeZ();
    mw.setViewMode('Slice View','Arithmetics');
    VQ.currentOp().multScalar(idx,100*1000/dose/vox_size);
}

function convertToSUV(idx,dose,weight){
    var mw = VQ.mainWin();
    var dm = VQ.dataManager();
    // get voxel size
    var vox_size = dm.voxelSizeX() * dm.voxelSizeY() * dm.voxelSizeZ();
    mw.setViewMode('Slice View','Arithmetics');
    VQ.currentOp().multScalar(idx,weight*1000/(vox_size*dose));

}
